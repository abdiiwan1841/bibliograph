#!/usr/bin/env bash

set -e

# dependencies: apt-get install jq (linux) / brew install jq (MacOS with homebrew)
command -v jq >/dev/null 2>&1 || { echo >&2 "You need to install the jq command"; exit 1; }

# arguments
BUILD_FILE=${1:-compile-dist.json}
BUILD_TARGET=${2:-build}

# configuration
QX_CMD="npx qx"
TOP_DIR=$(pwd)
DIST_DIR=$TOP_DIR/dist
CLIENT_SRC_DIR=$TOP_DIR/src/client/bibliograph
SERVER_SRC_DIR=$TOP_DIR/src/server
VERSION=$(node -p -e "require('$TOP_DIR/package.json').version")

if [[ ! -d "$DIST_DIR" ]]; then
    echo "Cannot find 'dist' subdirectory - are you in the top folder?"
fi

if [[ "$TRAVIS_BRANCH" != "" ]]; then
  ZIP_NAME=bibliograph-${TRAVIS_BRANCH}-snapshot.zip
  VERSION=snapshot-${TRAVIS_BRANCH}-$(date --utc +%Y%m%d_%H%M%SZ)
else
  ZIP_NAME=bibliograph-${VERSION}.zip
fi

# clean build
$TOP_DIR/tool/dist/clean

echo "*****************************************************************************************"
echo
echo "  Building distributable package of Bibliograph"
echo
echo "   - Qooxdoo build file:     $BUILD_FILE"
echo "   - Qooxdoo build target:   $BUILD_TARGET"
#echo "  Compiler version $(qx --version)"
if [[ "$COMPOSER" ]]; then
echo "   - Composer configuration: $COMPOSER"
fi
echo
echo "*****************************************************************************************"
echo

echo " >>> Building client ..."
# Export current version to qooxdo environment
jq ".environment[\"app.version\"]=\"$VERSION\"" $BUILD_FILE > $BUILD_FILE.tmp
mv $BUILD_FILE.tmp $BUILD_FILE

# Create deploy build and copy into dist
$QX_CMD deploy --configFile=$BUILD_FILE --target=$BUILD_TARGET --clean || exit 1
cp -a compiled/deploy/* $DIST_DIR || exit 1

echo " >>> Building server ..."
mkdir $DIST_DIR/server
cd $DIST_DIR/server
cp -a $SERVER_SRC_DIR/{config,controllers,lib,messages,migrations,models,modules,schema,views} .
mkdir -p runtime/{cache,logs}
rm -f config/{message.php,test.php}
echo "DENY FROM ALL" >> .htaccess

# install composer dependencies
cp -a $SERVER_SRC_DIR/composer.* .
composer install --no-dev  #&> /dev/null
if ! [ -d ./vendor ] || ! [ -f ./vendor/autoload.php ]; then
 echo " !!! Composer install failed!"
 exit 1
fi
rm -f ./composer.* &> /dev/null

echo " >>> Adding startup and configuration files ..."
cp $TOP_DIR/config.dist/{app.conf.toml,.env} $DIST_DIR

echo " >>> Adding documentation ..."
cp $TOP_DIR/{readme.md,release-notes.md} $DIST_DIR
echo $VERSION > $DIST_DIR/version.txt

echo " >>> Creating ZIP file ..."
cd $DIST_DIR
# remove git folders
( find . -type d -name ".git" ) | xargs rm -rf
zip -q -r $ZIP_NAME *
echo "Done."
exit 0
