#!/usr/bin/env bash

# Usage tool/dist/build path/to/.env
# Script can also be sourced

set -e
source tool/lib/functions.sh

# dependencies: apt-get install jq (linux) / brew install jq (MacOS with homebrew)
# command -v jq >/dev/null 2>&1 || { echo >&2 "You need to install the jq command"; exit 1; }

# get environment variables defaults
if [[ "$1" != "" ]]; then
  BUILD_ENV_FILE=${1}
  [[ -f "$BUILD_ENV_FILE" ]] || exit_with_error "File $BUILD_ENV_FILE does not exist"
  source $BUILD_ENV_FILE
fi

# configurable variables
QX_CMD=${QX_CMD:-"npx qx"}
APP_ENV_FILE=${APP_ENV_FILE:-$(pwd)/dist/.env}
APP_CONF_FILE=${APP_CONF_FILE:-$(pwd)/dist/app.conf.toml}
BUILD_FILE=${BUILD_FILE:-compile-dist.json}
BUILD_TARGET=${BUILD_TARGET:-build}
BUILD_VERBOSE=${BUILD_VERBOSE:-0}
BUILD_CLEAN=${BUILD_CLEAN:-0}
DIST_DIR=${DIST_DIR:-$(pwd)/dist}
DIST_CONF_DIR=${DIST_CONF_DIR:-$DIST_DIR/config}
DEPLOY_CONFIG_DIR=${DEPLOY_CONFIG_DIR:-"./config"}

# checks
[[ -f "$APP_ENV_FILE" ]] || exit_with_error "APP_ENV_FILE: File '$APP_ENV_FILE' does not exist"
[[ -f "$APP_CONF_FILE" ]] || exit_with_error "APP_CONF_FILE: File '$APP_CONF_FILE' does not exist"
[[ -f "$BUILD_FILE" ]] || exit_with_error "BUILD_FILE: File '$BUILD_FILE' does not exist"

# other internal variables
TOP_DIR=$(pwd)
DIST_SERVER_DIR=$DIST_DIR/server
SERVER_SRC_DIR=$TOP_DIR/src/server
VERSION=$(node -p -e "require('$TOP_DIR/package.json').version")

if [[ ! -d "$DIST_DIR" ]]; then
    echo "Cannot find 'dist' subdirectory - are you in the top folder?"
fi

if [[ "$TRAVIS_BRANCH" != "" ]]; then
  ZIP_NAME=bibliograph-${TRAVIS_BRANCH}-snapshot.zip
  VERSION=snapshot-${TRAVIS_BRANCH}-$(date --utc +%Y%m%d_%H%M%SZ)
else
  ZIP_NAME=bibliograph-${VERSION}.zip
fi

echo
echo "  Building deployable/distributable version of Bibliograph"
echo
if [[ $BUILD_VERBOSE == 1 ]]; then
  echo "   - Qooxdoo build file:     $BUILD_FILE"
  echo "   - Qooxdoo build target:   $BUILD_TARGET"
  echo "   - Application .env file:  $APP_ENV_FILE"
  echo "   - Appl. config file:      $APP_CONF_FILE"
  echo "   - Deployment config dir:  $DEPLOY_CONFIG_DIR"
  echo "   - Compiler version:       $($QX_CMD --version)"
fi
echo

echo ">>> Cleaning up dist folder..."
./tool/dist/clean

echo ">>> Building client ..."
# Export current version to qooxdo environment
jq ".environment[\"app.version\"]=\"$VERSION\"" $BUILD_FILE > $BUILD_FILE.tmp
mv $BUILD_FILE.tmp $BUILD_FILE

# Create deploy build and copy into dist
QX_COMPILE_ARGS=${QX_COMPILE_ARGS:-"--config-file=$BUILD_FILE --target=$BUILD_TARGET --clean"}
[[ $BUILD_VERBOSE == 1 ]] && echo "$QX_CMD deploy $QX_COMPILE_ARGS"
$QX_CMD deploy $QX_COMPILE_ARGS
cp -a compiled/deploy/* $DIST_DIR

echo ">>> Building server ..."

echo " - Copy/create files ..."

# application files
mkdir $DIST_DIR/server
cp -a $SERVER_SRC_DIR/{config,controllers,lib,messages,migrations,models,modules,schema,views,bootstrap.php} $DIST_SERVER_DIR/
mkdir -p $DIST_SERVER_DIR/runtime/{cache,logs}

# configuration files
mkdir -p $DIST_CONF_DIR
cp $APP_CONF_FILE $DIST_CONF_DIR/app.conf.toml
cp $APP_ENV_FILE $DIST_CONF_DIR/.env

# .htaccess files
cat << EOF > $DIST_DIR/.htaccess
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . server.php
EOF
echo "DENY FROM ALL" >> $DIST_SERVER_DIR/.htaccess
echo "DENY FROM ALL" >> $DIST_CONF_DIR/.htaccess

# create server.php
cat << EOF > $DIST_DIR/server.php
<?php
const APP_ROOT_DIR = __DIR__;
define("APP_FRONTEND_DIR", realpath("./bibliograph"));
define("DOTENV_FILE" , realpath("$DEPLOY_CONFIG_DIR/.env"));
define("APP_CONFIG_FILE", realpath("$DEPLOY_CONFIG_DIR/app.conf.toml"));
require './server/bootstrap.php';
\$config = require './server/config/web.php';
\$app = new yii\web\Application(\$config);
\$app->db->on(\yii\db\Connection::EVENT_AFTER_OPEN, function (\$event) {
  \$event->sender->createCommand("SET NAMES utf8")->execute();
});
\$app->run();
EOF

echo " - Adding dependencies ..."
# install composer dependencies
cp -a $SERVER_SRC_DIR/composer.* $DIST_SERVER_DIR/
COMPOSER_ARGS="--no-dev --working-dir=dist/server --no-plugins"
if [[ $BUILD_CLEAN != 0 ]]; then
  tool/dev/php src/lib/composer.phar clearcache
fi
if [[ $BUILD_VERBOSE != 0 ]]; then
  COMPOSER_ARGS="$COMPOSER_ARGS -v"
  tool/dev/php src/lib/composer.phar install $COMPOSER_ARGS
else
  tool/dev/php src/lib/composer.phar install $COMPOSER_ARGS &> /dev/null
fi

if ! [ -d $DIST_SERVER_DIR/vendor ] || ! [ -f $DIST_SERVER_DIR/vendor/autoload.php ]; then
 echo " !!! Composer install failed!"
 exit 1
fi
rm -f $DIST_SERVER_DIR/composer.* &> /dev/null

echo " - Adding documentation ..."
cp $TOP_DIR/{readme.md,release-notes.md} $DIST_DIR
echo $VERSION > $DIST_DIR/version.txt

echo ">>> Creating ZIP file ..."
cd $DIST_DIR
zip -q -r $ZIP_NAME *
mv $ZIP_NAME $TOP_DIR/
echo "Done."
