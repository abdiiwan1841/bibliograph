# Bibliograph Configuration File, using the .toml format
# See https://github.com/toml-lang/toml

[database]
# database.type
# the database type. currently, only mysql is supported and tested. Since
# the PDO abstraction layer is used, it will be easy to support other backends.
type = "mysql"

# database.host
# the database host, usually localhost
host = "127.0.0.1"

# database.port
# the port on which the database listens for requests, ususally 3306
port = 3306

# database.adminname and database.adminpassw
# The name and password of the database user. Both "normal" user and admin must be the same for the moment.
# This user needs ALL rights in the databases named below. If you want to make backup snapshots, it also
# needs the global RELOAD privilege
adminname  = "bibliograph"
adminpassw = "bibliograph"
username  = "%$database.adminname%"
userpassw = "%$database.adminpassw%"

# database.admindb
# The name of the database holding all the tables with global and
# administrative information. Must exist before the application is started
admindb = "bibliograph"

# database.userdb
# The name of the databases that contains the user data.
# Can be the same as database.admindb, but if you have access
# to more than one database, is recommended to keep a separate
# database for this. Must exist before the application is started.
userdb = "bibliograph"

# database.tmpdb
# The name of the database holding all the tables with temporary data.
# Can be the same as database.admindb, but if you have access
# to more than one database, is recommended to keep a separate
# database for this. Must exist before the application is started.
tmp_db = "bibliograph"

# database.tableprefix
# A global prefix for all tables that are created, which makes
# it possible to keep the data of several applications in one
# database. you can omit this if no prefix is needed.
tableprefix = ""

# database.encoding
# The default encoding scheme of the database. It is recommended
# to use the default utf8.
encoding = "utf8"

[email]
# The email address of the administrator of this particular installation.
# Must be set, otherwise setup process will not complete
admin = "nobody@domain.org"

# The email address of the developer of the application. Don't change
# this unless you are a developer
developer = "info@bibliograph.org"

# The type of email transport. Either "sendmail" or "smtp". "sendmail" probably
# works only on Linux/Mac and only if php and the host are configured to use
# this transport. "smtp" uses a separate smtp server (see below)
transport = "sendmail"

# If transport is "smtp", specify connection parameters here
# host = "localhost"
# username = "smtp username"
# password = "smtp password"
# port =  "587"
# encryption = "tls"

# Uncomment and configure the following values if you want Yii::error() messages
# to be sent to a specific address.
# errors_from = "%$email.admin%"
# errors_to = "errors@domain.org"
# errors_subject = "Bibliograph error at domain.org"

[ldap]
# Whether ldap authentication is enabled, values: yes/no
enabled = false

# Whether to use ldap groups. values yes/no
use_groups = true

# The host of the ldap server
host = "ldap.example.com"

# The port listening for ldap connections
port = 389

# The dn/password of a user that can bind to the LDAP server to do searches.
# Not needed if anonymous binding is allowed.
bind_dn = ""
bind_password = ""

# base dn to which the user name is added for authentication
user_base_dn = "ou=people,dc=example,dc=com"

# attribute name that is used for the user name, usually uid.
user_id_attr = "uid"

# attributes that are used to authenticate the user in addition to 'ldap.user_id_attr'
# for example, ["cn","mail","displayName"]
alternative_auth_attrs = []

# base dn of group data
group_base_dn = "ou=groups,dc=example,dc=com"

# attribute for members of the group, was called 'member_id_attr' before
group_member_attr = "memberUid"

# attribute for the group name, usually description or displayName
group_name_attr = "description"

# if the LDAP database only stores the user name part of the users'
# e-mail address, you can provide the domain part here
mail_domain = "example.com"

[access]
# whether users are attached to roles directly ("yes") or have roles
# dependent on the group they belong to ("no"), i.e. users can have
# different roles in different groups. You can still define global
# roles when using group-specific roles. On the other hand, if you set this
# value to "yes", group-specific roles will be ignored.
global_roles_only = false

# whether authentication should be possible only via https.
# this option gets set as a read-only configuration value
# (access.enforce_https_login) also which is available on the
# client. (boolean)
enforce_https_login = false

[service]
# service.event_transport
# Whether the server response should contain messages and events
# for the qooxdoo application
# (boolean)
event_transport = true