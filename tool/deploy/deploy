#!/usr/bin/env bash

# This script is partly based on code copied from
# https://github.com/qooxdoo/deployment/blob/master/deployer.sh
# by @johnspackman

set -e
shopt -s dotglob

source tool/lib/functions.sh

# Preset default command line args
ANSWER_YES=0
CLEAN=0
VERBOSE=0
QUIET=0
USAGE=0
SKIP_BUILD=0
DIST_DIR=$(pwd)/dist
DEPLOY_ENV_FILE=".env"
DEPLOY_HOST=""
DEPLOY_DIR=""
DEPLOY_CONFIG_DIR=config
DEPLOY_DB_NAME=""
DEPLOY_IMPORT_DB_NAMES=""
BUILD_CONFIG_FILE="compile.json"
QX_COMPILE_ARGS=""

#
# Process command line
#
while [[ $1 != "" ]] ; do
    case "$1" in

        "--env-file"|"-e")
            DEPLOY_ENV_FILE="$2"
            [[ -f $DEPLOY_ENV_FILE ]] || exit_with_error "Environment variable file $DEPLOY_ENV_FILE does not exist"
            source "$DEPLOY_ENV_FILE"
            shift
            ;;

        "--build-config-file"|"-c")
            BUILD_CONFIG_FILE="$2"
            shift
            ;;

        "--skip-build"|"-k")
            SKIP_BUILD=1
            ;;

        "--deploy-host"|"-H")
            DEPLOY_HOST="$2"
            shift
            ;;

        "--deploy-config-dir"|"-C")
            DEPLOY_CONFIG_DIR="$2"
            shift
            ;;

        "--deploy-dir"|"-D")
            DEPLOY_DIR="$2"
            shift
            ;;

        "--database"|"-B")
            DEPLOY_DB_NAME="$2"
            shift
            ;;

        "--import-database"|"-I")
            DEPLOY_IMPORT_DB_NAMES="$2"
            shift
            ;;

        "--clean")
            CLEAN=1
            ;;

        "--verbose"|"-v")
            VERBOSE=1
            ;;

        "--quiet"|"-q")
            QUIET=1
            ;;

        "--yes"|"-y")
            ANSWER_YES=1
            ;;

        "--help"|"-h")
            USAGE=1
            ;;
    esac
    shift
done


if [[ $USAGE != 0 ]] ; then
cat << EOF
Usage: $0 [options]
where options are:
  --env-file, -e file           - the .env file containing configuration
                                 (defaults to .env). Must be the first parameter
                                 if others are to override the settings.
  --build-config-file, -c       - the compiler configuration file to use
                                  (defaults to compile.json)
  --skip-build, -k              - use the build files that already exist
  --deploy-host, -H path        - the host server to deploy to via SSH, overrides
                                  DEPLOY_HOST
  --deploy-dir, -D path         - the directory on the host to deploy to,
                                  overrides DEPLOY_DIR
  --deploy-config-dir, -C path  - the path to the configuration dir, absolute or
                                  relative to the deployment dir. Defaults to
                                  'config', overrides DEPLOY_CONFIG_DIR
  --database, -N name           - the name of the database to use on the host,
                                  overrides DB_DATABASE
  --import-database, -I name    - the name of the database to import tables from
                                  (only remotely), overrides DEPLOY_IMPORT_DB_NAMES
  --clean                       - clean the working directory
  --yes, -y                     - answer yes to all prompts
  --verbose, -v                 - verbose output
  --help, -h                    - show usage help

Many configuration values cannot be set via command line arguments.
Make sure to declare them into the environment variable file specified by --env-file:
  DB_TYPE           - The type of the database (only mysql supported at this point)
  DB_HOST           - The host on which the database server can be reached (usually localhost)
  DB_PORT           - Port
  DB_DATABASE       - The name of the database in which the application data is
  DB_USER           - The name of the database user for the application
  DB_PASSWORD       - Password of that user
  APP_ENV_FILE      - The .env file containg environment variables for the application
  APP_CONF_FILE     - The .toml file containing configuration values for the application
EOF
  exit 0
fi

# Configure compile command

if [[ "$BUILD_CONFIG_FILE" != "" ]]; then
  QX_COMPILE_ARGS="$QX_COMPILE_ARGS --config-file=$BUILD_CONFIG_FILE"
fi
if [[ $CLEAN != 0 ]] ; then
    QX_COMPILE_ARGS="$QX_COMPILE_ARGS --clean"
fi
if [[ $VERBOSE != 0 ]] ; then
    QX_COMPILE_ARGS="$QX_COMPILE_ARGS --verbose"
elif [[ $QUIET != 0 ]] ; then
    QX_COMPILE_ARGS="$QX_COMPILE_ARGS --quiet"
fi

# get environment variables that override the default

# override .env values
if [[ "$DEPLOY_DB_NAME" != "" ]]; then
  DB_DATABASE=$DEPLOY_DB_NAME
fi

# check variables
[[ "$DEPLOY_HOST" == "" ]] && exit_with_error "No deploy host given."
[[ "$DEPLOY_DIR" == "" ]] && exit_with_error "No deploy dir given."

if [[ "$DEPLOY_CONFIG_DIR" != /* ]]; then
  DEPLOY_CONFIG_DIR=$DEPLOY_DIR/$DEPLOY_CONFIG_DIR
fi

# verbose display of configuration
if [[ $VERBOSE != 0 ]] ; then
    echo "DEPLOY_CONFIG_DIR=$DEPLOY_CONFIG_DIR"
    echo "SKIP_BUILD=$SKIP_BUILD"
    echo "ANSWER_YES=$ANSWER_YES"
    echo "BUILD_DEBUG_TARGET=$BUILD_DEBUG_TARGET"
    echo "CLEAN=$CLEAN"
    echo "VERBOSE=$VERBOSE"
    echo "QUIET=$QUIET"
    echo "ANSWER_YES=$ANSWER_YES"
    echo "QX_COMPILE_ARGS=$QX_COMPILE_ARGS"
fi

if [[ $QUIET != 1 ]] ; then
  echo
  echo "Deployment configuration:"
  echo "   Environment file:            $DEPLOY_ENV_FILE"
  echo "   Compiler configuration file: $BUILD_CONFIG_FILE"
  echo "   Build directory:             $DIST_DIR"
  echo "   Skip build step:             $([[ $SKIP_BUILD == 1 ]] && echo 'Yes' || echo 'No')"
  echo "   Deployment host:             $DEPLOY_HOST"
  echo "   Path on host:                $DEPLOY_DIR"
  echo "   Config directory on host:    $DEPLOY_CONFIG_DIR"
  echo "   Database used:               $DB_DATABASE"
  echo "   Database(s) to import:       $DEPLOY_IMPORT_DB_NAMES"
  echo
fi

if [ "$YES" != 1 ]; then
  read -r -p "Proceed? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
        # pass
        ;;
    *)
        echo "Aborted."
        exit 0;
        ;;
  esac
fi

# Build
export QX_COMPILE_ARGS
if [[ $SKIP_BUILD == 0 ]]; then
 tool/dist/build $BUILD_CONFIG_FILE
fi

# Deploy!
RECREATE_DB_CMD_ARGS="--user=$DB_USER --password=$DB_PASSWORD -e 'drop database if exists $DB_DATABASE; create database $DB_DATABASE;'"
# importing databases, very hacky at the moment

if [ "$DEPLOY_HOST" == "local" ]; then
  # local deployment
  mkdir -p $DEPLOY_DIR
  if [ $CLEAN == 1 ]; then
    echo ">>> Cleaning up $DEPLOY_DIR ..."
    sudo rm -rf $DEPLOY_DIR/*
    mysql "$RECREATE_DB_CMD_ARGS"
  fi
  echo ">>> Copying files to $DEPLOY_DIR ..."
  cp -rf $DIST_DIR/* $DEPLOY_DIR
  chmod -R 0777 $DEPLOY_DIR/server/runtime
else
  # remote deploment
  echo ">>> Creating $DEPLOY_DIR ..."
  ssh $DEPLOY_HOST "mkdir -p $DEPLOY_DIR"
  if [ $CLEAN == 1 ]; then
    echo ">>> Cleaning up $DEPLOY_DIR ..."
    ssh $DEPLOY_HOST "rm -rf $DEPLOY_DIR/*"
    echo ">>> Resetting database ..."
    ssh $DEPLOY_HOST "mysql $RECREATE_DB_CMD_ARGS"
  fi
  if [[ "$DEPLOY_IMPORT_DB_NAMES" != "" ]]; then
    echo ">>> Importing database(s) $DEPLOY_IMPORT_DB_NAMES ..."
    ssh $DEPLOY_HOST <<EOF
      for db in "$DEPLOY_IMPORT_DB_NAMES"; do
       echo " >>> Cloning database '\$db' into '$DB_DATABASE'..."
       mysqldump \
         --user=$DB_USER \
         --password=$DB_PASSWORD \
         --default-character-set=utf8 \
         --set-charset \
         \$db \
       | sed s/bibliograph\.schema\.huBerlinRewi/bibliograph_extended/g \
       | sed s/\$db/$DB_DATABASE/g \
       | sed s/\'0000-00-00\'/NULL/g \
       | iconv -f utf-8 -t utf-8 -c \
       | mysql \
         --user=$DB_USER \
         --password=$DB_PASSWORD \
         --default-character-set=utf8 \
         $DB_DATABASE
      done
EOF

  fi
  echo ">>> Syncing files with $DEPLOY_HOST:$DEPLOY_DIR ..."
  rsync -azpr $DIST_DIR/* $DEPLOY_HOST:$DEPLOY_DIR
  if [ "$DEPLOY_CONFIG_DIR" != "$DEPLOY_DIR/config" ]; then
    ssh $DEPLOY_HOST "mv $DEPLOY_DIR/config $DEPLOY_CONFIG_DIR"
    ssh $DEPLOY_HOST "sed -i 's/__DIR__ \\. \\\"\\/config\\\"/$DEPLOY_CONFIG_DIR/' $DEPLOY_DIR/server.php"
  fi
  ssh $DEPLOY_HOST "chmod -R 0777 $DEPLOY_DIR/server/runtime"
fi
echo "Done."
