#!/usr/bin/env bash

# This script is partly based on code copied from
# https://github.com/qooxdoo/deployment/blob/master/deployer.sh
# by @johnspackman

set -e
shopt -s dotglob

source tool/lib/functions.sh

# Preset default command line args
ANSWER_YES=0
CLEAN=0
VERBOSE=0
QUIET=0
USAGE=0
SKIP_BUILD=0
DIST_DIR=$(pwd)/dist
DEPLOY_ENV_FILE=".env"
DEPLOY_HOST=""
DEPLOY_DIR=""
DEPLOY_CONFIG_DIR=config
DEPLOY_DB_NAME=""
DEPLOY_IMPORT_DB_NAMES=""
BUILD_CONFIG_FILE="compile.json"
QX_COMPILE_ARGS=""

#
# Process command line
#
while [[ $1 != "" ]] ; do
    case "$1" in

        "--env-file"|"-e")
            DEPLOY_ENV_FILE="$2"
            shift
            ;;

        "--build-config-file"|"-c")
            BUILD_CONFIG_FILE="$2"
            shift
            ;;

        "--skip-build"|"-k")
            SKIP_BUILD=1
            ;;

        "--deploy-host"|"-H")
            DEPLOY_HOST="$2"
            shift
            ;;

        "--deploy-config-dir"|"-C")
            DEPLOY_CONFIG_DIR="$2"
            shift
            ;;

        "--deploy-dir"|"-D")
            DEPLOY_DIR="$2"
            shift
            ;;

        "--database"|"-B")
            DEPLOY_DB_NAME="$2"
            shift
            ;;

        "--import-database"|"-I")
            DEPLOY_IMPORT_DB_NAMES="$2"
            shift
            ;;

        "--clean")
            CLEAN=1
            ;;

        "--verbose"|"-v")
            VERBOSE=1
            ;;

        "--quiet"|"-q")
            QUIET=1
            ;;

        "--yes"|"-y")
            ANSWER_YES=1
            ;;

        "--help"|"-h")
            USAGE=1
            ;;
    esac
    shift
done

if [[ $USAGE != 0 ]] ; then
    echo "Usage: $0 [options]"
    echo "where options are:"
    echo "  --env-file, -e file          - the .env file containing configuration (defaults to .env)"
    echo "  --build-config-file, -c      - the compiler configuration file to use (defaults to compile.json)"
    echo "  --skip-build, -k             - use the build files that already exist"
    echo "  --deploy-host, -H path       - the host server to deploy to via SSH"
    echo "  --deploy-dir, -D path        - the directory on the host to deploy to"
    echo "  --deploy-config-dir, -C path - the path to the configuration dir, absolute or"
    echo "                                 relative to the deployment dir. Defaults to 'config'"
    echo "  --database, -N name          - the name of the database to use on the host"
    echo "  --import-database, -I name   - the name of the database to import tables from (only remotely)"
    echo "  --clean                      - clean the working directory"
    echo "  --yes, -y                    - answer yes to all prompts"
    echo "  --verbose, -v                - verbose output"
    echo "  --help, -h                   - show usage help"
    echo
    echo "Some configuration values cannot be set via command line arguments."
    echo "Make sure to put them into the environment variable file specified by --env-file:"
    echo "  DB_TYPE           - The type of the database (only mysql supported at this point)"
    echo "  DB_HOST           - The host on which the database server can be reached (usually localhost)"
    echo "  DB_PORT           - Port"
    echo "  DB_DATABASE       - The name of the database in which the application data is"
    echo "  DB_USER           - The name of the database user for the application"
    echo "  DB_PASSWORD       - Password of that user"
    echo "  DB_ROOT_USER      - Only use in development mode!"
    echo "  DB_ROOT_PASSWORD  - Only use in development mode!"
    echo
    exit 0
fi

# Configure compile command

if [[ "$BUILD_CONFIG_FILE" != "" ]]; then
  QX_COMPILE_ARGS="$QX_COMPILE_ARGS --config-file=$BUILD_CONFIG_FILE"
fi
if [[ $CLEAN != 0 ]] ; then
    QX_COMPILE_ARGS="$QX_COMPILE_ARGS --clean"
fi
if [[ $VERBOSE != 0 ]] ; then
    QX_COMPILE_ARGS="$QX_COMPILE_ARGS --verbose"
elif [[ $QUIET != 0 ]] ; then
    QX_COMPILE_ARGS="$QX_COMPILE_ARGS --quiet"
fi

# get environment variables that override the defaults
[[ -f $DEPLOY_ENV_FILE ]] || exit_with_error "Environment variable file $DEPLOY_ENV_FILE does not exist"
source "$DEPLOY_ENV_FILE"

# override .env values
if [[ "$DEPLOY_DB_NAME" != "" ]]; then
  DB_DATABASE=$DEPLOY_DB_NAME
fi

# check variables
[[ "$DEPLOY_HOST" == "" ]] && exit_with_error "No deploy host given."
[[ "$DEPLOY_DIR" == "" ]] && exit_with_error "No deploy dir given."

if [[ "$DEPLOY_CONFIG_DIR" != /* ]]; then
  DEPLOY_CONFIG_DIR=$DEPLOY_DIR/$DEPLOY_CONFIG_DIR
fi

# verbose display of configuration
if [[ $VERBOSE != 0 ]] ; then
    echo "DEPLOY_CONFIG_DIR=$DEPLOY_CONFIG_DIR"
    echo "SKIP_BUILD=$SKIP_BUILD"
    echo "ANSWER_YES=$ANSWER_YES"
    echo "BUILD_DEBUG_TARGET=$BUILD_DEBUG_TARGET"
    echo "CLEAN=$CLEAN"
    echo "VERBOSE=$VERBOSE"
    echo "QUIET=$QUIET"
    echo "ANSWER_YES=$ANSWER_YES"
    echo "QX_COMPILE_ARGS=$QX_COMPILE_ARGS"
fi

if [[ $QUIET != 1 ]] ; then
  echo
  echo "Deployment configuration:"
  echo "   Environment file:            $DEPLOY_ENV_FILE"
  echo "   Compiler configuration file: $BUILD_CONFIG_FILE"
  echo "   Build directory:             $DIST_DIR"
  echo "   Skip build step:             $([[ $SKIP_BUILD == 1 ]] && echo 'Yes' || echo 'No')"
  echo "   Deployment host:             $DEPLOY_HOST"
  echo "   Path on host:                $DEPLOY_DIR"
  echo "   Config directory on host:    $DEPLOY_CONFIG_DIR"
  echo "   Database used:               $DB_DATABASE"
  echo "   Database(s) to import:       $DEPLOY_IMPORT_DB_NAMES"
  echo
fi

if [ "$YES" != 1 ]; then
  read -r -p "Proceed? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
        # pass
        ;;
    *)
        echo "Aborted."
        exit 0;
        ;;
  esac
fi

# Build
if [[ $SKIP_BUILD == 0 ]]; then
 tool/dist/build $BUILD_CONFIG_FILE
fi

# Deploy!
RECREATE_DB_CMD_ARGS="--user=$DB_USER --password=$DB_PASSWORD -e 'drop database if exists $DB_DATABASE; create database $DB_DATABASE;'"
# importing databases, very hacky at the moment
IMPORT_DB_CMD=<<EOF
  for db in "$DEPLOY_IMPORT_DB_NAMES"; do
   echo " >>> Cloning database '\$db' into '$DB_DATABASE'..."
   mysqldump \
     --user=$DB_USER \
     --password=$DB_PASSWORD \
     --default-character-set=utf8 \
     --set-charset \
     \$db \
   | sed s/bibliograph\.schema\.huBerlinRewi/bibliograph_extended/g \
   | sed s/\$db/$DB_DATABASE/g \
   | sed s/\'0000-00-00\'/NULL/g \
   | iconv -f utf-8 -t utf-8 -c \
   | mysql \
     --user=$DB_USER \
     --password=$DB_PASSWORD \
     --default-character-set=utf8 \
     $DB_DATABASE
  done
EOF

if [ "$DEPLOY_HOST" == "local" ]; then
  # local deployment
  mkdir -p $DEPLOY_DIR
  if [ $CLEAN == 1 ]; then
    echo ">>> Cleaning up $DEPLOY_DIR ..."
    sudo rm -rf $DEPLOY_DIR/*
    mysql "$RECREATE_DB_CMD_ARGS"
  fi
  echo ">>> Copying files to $DEPLOY_DIR ..."
  cp -rf $DIST_DIR/* $DEPLOY_DIR
  chmod -R 0777 $DEPLOY_DIR/server/runtime
else
  # remote deploment
  ssh $DEPLOY_HOST "mkdir -p $DEPLOY_DIR"
  if [ "$DEPLOY_CLEAN" == true ]; then
    echo ">>> Cleaning up $DEPLOY_DIR ..."
    ssh $DEPLOY_HOST "rm -rf $DEPLOY_DIR/*"
    ssh $DEPLOY_HOST "mysql $RECREATE_DB_CMD_ARGS"
  fi
  if [[ "$DEPLOY_IMPORT_DB_NAMES" != "" ]]; then
    ssh $DEPLOY_HOST $IMPORT_DB_CMD
  fi
  echo ">>> Syncing files with $DEPLOY_HOST:$DEPLOY_DIR ..."
  rsync -azpr $DIST_DIR/* $DEPLOY_HOST:$DEPLOY_DIR
  if [ "$DEPLOY_CONFIG_DIR" != "$DEPLOY_DIR/config" ]; then
    ssh $DEPLOY_HOST "mv $DEPLOY_DIR/config $DEPLOY_CONFIG_DIR"
    ssh $DEPLOY_HOST "sed -i 's/__DIR__ \\. \\\"\\/config\\\"/$DEPLOY_CONFIG_DIR/' $DEPLOY_DIR/server.php"
  fi
  ssh $DEPLOY_HOST "chmod -R 0777 $DEPLOY_DIR/server/runtime"
fi
echo "Done."
